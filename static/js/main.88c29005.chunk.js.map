{"version":3,"sources":["reportWebVitals.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","TodoList","id","this","props","items","map","item","className","text","onClick","removeItem","itemId","React","Component","TodoApp","state","handleChange","e","setState","target","value","handleSubmit","preventDefault","length","Date","now","concat","filter","onSubmit","htmlFor","onChange","ReactDOM","render","document","getElementById"],"mappings":"mMAYeA,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,OCFRQ,E,4JAMJ,WAAS,IAAD,OACN,OACE,qBAAKC,GAAG,QAAR,SACGC,KAAKC,MAAMC,MAAMC,KAAI,SAAAC,GAAI,OACxB,sBAAKC,UAAU,OAAf,UACE,8BAAK,oBAAIA,UAAU,WAAd,SAA0BD,EAAKE,SACpC,8BAAK,wBAAQD,UAAU,YAAYE,QAAS,kBAAM,EAAKC,WAAWJ,EAAKL,KAAlE,wBAFoBK,EAAKL,W,wBASxC,SAAWU,GACTT,KAAKC,MAAMO,WAAWC,O,GApBHC,IAAMC,WAwBvBC,E,4MAGFC,MAAQ,CAACX,MAAO,GAAII,KAAM,I,EAM5BQ,aAAe,SAAAC,GACb,EAAKC,SAAS,CAACV,KAAMS,EAAEE,OAAOC,S,EAiChCC,aAAe,SAAAJ,GAEb,GADAA,EAAEK,iBAC4B,IAA3B,EAAKP,MAAMP,KAAKe,OAAnB,CAGA,IAAMjB,EAAO,CACXE,KAAM,EAAKO,MAAMP,KACjBP,GAAIuB,KAAKC,OAEX,EAAKP,UAAS,SAAAH,GAAK,MAAK,CACtBX,MAAOW,EAAMX,MAAMsB,OAAOpB,GAC1BE,KAAM,S,EAIVE,WAAa,SAAAC,GACX,EAAKO,UAAS,SAAAH,GAAK,MAAK,CACtBX,MAAOW,EAAMX,MAAMuB,QAAO,SAAArB,GAAI,OAAIA,EAAKL,KAAOU,U,4CA/ClD,WACE,OACE,sBAAKV,GAAG,OAAR,UACE,sCACA,cAAC,EAAD,CAAUG,MAAOF,KAAKa,MAAMX,MAAOM,WAAcR,KAAKQ,aACtD,uBACA,uBAAMkB,SAAU1B,KAAKmB,aAArB,UACE,uBAAOQ,QAAQ,WAAf,oCAGA,uBACA,uBACA,uBACE5B,GAAG,WACH6B,SAAU5B,KAAKc,aACfI,MAAOlB,KAAKa,MAAMP,OAEpB,uBACA,uBACA,uBACA,wBAAQP,GAAG,SAAX,SACE,sCAASC,KAAKa,MAAMX,MAAMmB,OAAS,iB,GAlCzBX,IAAMC,WAiE5BkB,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,SAE1B3C,M","file":"static/js/main.88c29005.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\n\nclass TodoList extends React.Component{\n  // constructor(props) {\n  //   super(props);\n  //   this.removeItem = this.removeItem.bind(this);\n\n  // }\n  render(){\n    return (\n      <div id=\"items\">\n        {this.props.items.map(item => (\n          <div className=\"item\" key={item.id}>\n            <div><h3 className=\"itemText\">{item.text}</h3></div>\n            <div><button className=\"removeBtn\" onClick={() => this.removeItem(item.id)}>Remove</button></div>\n          </div>\n        ))}\n      </div>\n    )\n  }\n\n  removeItem(itemId) {\n    this.props.removeItem(itemId);\n  }\n}\n\nclass TodoApp extends React.Component {\n  // constructor(props) {\n  //   super(props);\n    state = {items: [], text: ''};\n    // this.handleChange= this.handleChange.bind(this);\n    // this.handleSubmit = this.handleSubmit.bind(this);\n    // this.removeItem = this.removeItem.bind(this);\n  // }\n\n  handleChange = e => {\n    this.setState({text: e.target.value});\n  }\n\n  render() {\n    return (\n      <div id=\"main\">\n        <h3>TODO</h3>\n        <TodoList items={this.state.items} removeItem = {this.removeItem}/>\n        <hr></hr>\n        <form onSubmit={this.handleSubmit}>\n          <label htmlFor=\"new-todo\">\n            What needs to be done?\n          </label>\n          <br />\n          <br />\n          <input\n            id=\"new-todo\"\n            onChange={this.handleChange}\n            value={this.state.text}\n          />\n          <br />\n          <br />\n          <br />\n          <button id=\"submit\">\n            <b>Add #{this.state.items.length + 1}</b>\n          </button>\n        </form>\n      </div>\n    );\n  }\n\n  \n\n  handleSubmit = e => {\n    e.preventDefault();\n    if(this.state.text.length === 0){\n      return;\n    }\n    const item = {\n      text: this.state.text,\n      id: Date.now()\n    };\n    this.setState(state => ({\n      items: state.items.concat(item),\n      text: ''\n    }))\n  }\n\n  removeItem = itemId => {\n    this.setState(state => ({\n      items: state.items.filter(item => item.id !== itemId)\n    }))\n  }\n}\n\nReactDOM.render(\n  <TodoApp />,\n  document.getElementById('root')\n);\nreportWebVitals();\n"],"sourceRoot":""}